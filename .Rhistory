fluidRow(
DT::dataTableOutput("table")
)
)
shinyApp(ui = ui, server = server)
ggplot(data = NHL, mapping = aes(x = GP, y = PTS, color = position1)) +
geom_point() +
geom_smooth()
##Separate Position variable
NHL <- NHL %>%
separate(Position, c("position1", "Position2"), sep = "/")
ggplot(data = NHL) +
geom_point(mapping = aes(x = GP, y = PTS, color = position1))
(mapping = aes(x = GP, y = PTS, color = position1))
ggplot(data = NHL, mapping = aes(x = GP, y = PTS, color = position1)) +
geom_point() +
geom_smooth()
ggplot(data = NHL) +
geom_point(mapping = aes(x = PlusMinus, y = PTS))
ggplot(data = NHL) +
geom_point(mapping = aes(x = PlusMinus, y = PTS, color = position1))
ggplot(data = NHL) +
geom_point(mapping = aes(x = PTS, y = PlusMinus color = position1))
ggplot(data = NHL) +
geom_point(mapping = aes(x = PTS, y = PlusMinus, color = position1))
library(tidyverse)
library(shiny)
library(DT)
library(data.table)
NHL <- read.csv("NHL 2016_17.csv",header = TRUE, sep = ";")
colnames(NHL)[23] <- "PlusMinus"
NHL2<- select(NHL, First.Name, Last.Name, Nat, Team, GP, G, A, PTS, Position)
datatable(NHL2)
?kmeans
View(NHL2)
kmeans_cluster <- kmeans(NHL2,  2, nstart=20)
set.seed (2)
x=matrix (rnorm (50*2) , ncol =2)
x
x[1:25 ,1]=x[1:25 ,1]+3
x[1:25 ,2]=x[1:25 ,2] -4
x
km.out =kmeans (x,2, nstart =20)
km.out
plot(x, col =(km.out$cluster +1) , main="K-Means Clustering
Results with K=2", xlab ="", ylab="", pch =20, cex =2)
NHL3 <- select(NHL2, G,A)
km.out =kmeans (x,3, nstart =20)
plot(x, col =(km.out$cluster +1) , main="K-Means Clustering
Results with K=2", xlab ="", ylab="", pch =20, cex =2)
km.out =kmeans (x,6, nstart =20)
plot(x, col =(km.out$cluster +1) , main="K-Means Clustering
Results with K=2", xlab ="", ylab="", pch =20, cex =2)
kmean_cluster <- kmeans(NHL3, 2, nstart = 20)
plot(NHL3, col =(km.out$cluster +1) , main="K-Means Clustering
Results with K=2", xlab ="", ylab="", pch =20, cex =2)
kmean_cluster <- kmeans(NHL3, 2, nstart = 20)
plot(NHL3, col =(kmean_cluster$cluster +1) , main="K-Means Clustering
Results with K=2", xlab ="", ylab="", pch =20, cex =2)
kmean_cluster <- kmeans(NHL3, 5, nstart = 20)
plot(NHL3, col =(kmean_cluster$cluster +1) , main="K-Means Clustering
Results with K=2", xlab ="", ylab="", pch =20, cex =2)
plot(NHL3, col =(kmean_cluster$cluster) , main="K-Means Clustering
Results with K=2", xlab ="", ylab="", pch =20, cex =2)
plot(NHL3, col =(kmean_cluster$cluster+1) , main="K-Means Clustering
Results with K=2", xlab ="", ylab="", pch =20, cex =2)
ggplot(data = kmean_cluster) +
geom_point(mapping = aes(x = "", y = "", color = class))
kmean_cluster
summary(kmean_cluster)
install.packages("ggfortify")
library(ggfortify)
autoplot(kmeans(USArrests, 3), data = USArrests)
autoplot(kmeans(NHL3, 3), data = NHL3)
autoplot(kmeans(select(NHL3, GP, A, G, P, 3), data = NHL3)
autoplot(kmeans(select(NHL3, GP, A, G, P, 3), data = NHL3)
()
library(tidyverse)
library(shiny)
library(DT)
library(data.table)
NHL <- read.csv("NHL 2016_17.csv",header = TRUE, sep = ";")
getwd()
list.files()
class(iris)
dim(NHL)
glimpse(NHL)
hist(GP)
names(NHL)
colnames(NHL)[23] <- "PlusMinus"
ggplot(data = NHL) +
geom_point(mapping = aes(x = GP, y = PTS))
##Separate Position variable
NHL <- NHL %>%
separate(Position, c("position1", "Position2"), sep = "/")
ggplot(data = NHL, mapping = aes(x = GP, y = PTS, color = position1)) +
geom_point() +
geom_smooth()
ggplot(data = NHL) +
geom_point(mapping = aes(x = PTS, y = PlusMinus, color = position1))
?lm
model1 <- lm(PTS, PlusMinus, data = NHL)
model1 <- lm(NHL$PTS, NHL$PlusMinus, data = NHL)
model1 <- lm(NHL$PTS~NHL$PlusMinus, data = NHL)
summary(model1)
plot(model1)
datatable(NHL2)
#################################################################################
NHL2<- select(NHL, First.Name, Last.Name, Nat, Team, GP, G, A, PTS, Position)
NHL2<- select(NHL, First.Name, Last.Name, Nat, Team, GP, G, A, PTS)
datatable(NHL2)
NHL <- read.csv("NHL 2016_17.csv",header = TRUE, sep = ";")
colnames(NHL)[23] <- "PlusMinus"
NHL <- NHL %>%
separate(Position, c("position1", "Position2"), sep = "/")
NHL2<- select(NHL, First.Name, Last.Name, Nat, Team, GP, G, A, PTS, PlusMinus, Position)
View(NHL)
NHL <- read.csv("NHL 2016_17.csv",header = TRUE, sep = ";")
colnames(NHL)[23] <- "PlusMinus"
##Separate Position variable
NHL <- NHL %>%
separate(Position, c("Position1", "Position2"), sep = "/")
NHL2<- select(NHL, First.Name, Last.Name, Nat, Team, GP, G, A, PTS, PlusMinus, Position)
NHL2<- select(NHL, First.Name, Last.Name, Nat, Team, GP, G, A, PTS, PlusMinus, Position1)
datatable(NHL2)
NHL2[846,]
NHL2[510,]
NHL2[188,]
plot(NHL$PTS,NHL$PlusMinus)
abline(lm(NHL$PTS ~ PlusMinus))
abline(lm(NHL$PTS ~ NHL$PlusMinus))
ggplot(data = NHL, mapping = aes(x = PTS, y = PlusMinus)) +
geom_point() +
geom_smooth(method = "lm")
?write.csv
write.csv(NHL, file="NHL_cleaned.csv")
list.files
list.files()
ggplot(data = NHL, mapping = aes(x = GP, y = PTS, color = Position1)) +
geom_point() +
geom_smooth()
write.csv(NHL, file="NHL_cleaned.csv", sep=";", row.names = TRUE)
write.csv2(NHL, file="NHL_cleaned.csv", sep=";", row.names = TRUE)
list.files()
NHL <- read.csv("NHL_cleaned.csv", header = TRUE)
View(NHL)
NHL <- read.csv("NHL_cleaned.csv", sep =";", header = TRUE)
View(NHL)
ggplot(data = NHL, mapping = aes(x = PTS, y = PlusMinus, color = Position1)) +
geom_point() +
geom_smooth(method = "lm")
datatable(NHL2)
ggplotRegression(lm(NHL2$PTS ~ NHL2$PlusMinus, data = NHL2))
ggplot(data = NHL, mapping = aes(x = PTS, y = PlusMinus, color = Position1)) +
geom_point() +
geom_smooth(method = "lm")
View(NHL)
NHL <- read.csv("NHL 2016_17.csv",header = TRUE, sep = ";")
names(NHL)
rename(NHL, X... = PlusMinus)
("NHL 2016_17.csv",header = TRUE, sep = ";")
NHL <- read.csv("NHL 2016_17.csv",header = TRUE, sep = ";")
colnames(NHL)[23] <- "PlusMinus"
##Separate Position variable
NHL <- NHL %>%
separate(Position, c("Position1", "Position2"), sep = "/")
?separate
##Separate Position variable
NHL <- NHL %>%
separate(Salary, c("USAdollar", "Salary"), sep = "1")
NHL <- read.csv("NHL 2016_17.csv",header = TRUE, sep = ";")
##Separate Position variable
NHL <- NHL %>%
separate(Salary, c("USAdollar", "Salary"), sep = "$")
View(NHL)
View(NHL)
substring(NHL$Salary, 1)
NHL <- read.csv("NHL 2016_17.csv",header = TRUE, sep = ";")
##Separate Position variable
NHL <- NHL %>%
separate(Salary, c("USAdollar", "Salary"), sep = 2)
View(NHL)
NHL <- read.csv("NHL 2016_17.csv",header = TRUE, sep = ";")
##Separate Position variable
NHL <- NHL %>%
separate(Salary, c("USAdollar", "Salary"), sep = 1)
NHL$USAdollar
NHL$Salary
class(NHL$Salary)
plot(NHL$Salary)
View(NHL)
NHL <- read.csv("NHL_cleaned.csv", sep =";", header = TRUE)
names(NHL)
NHL$Team
unique(NHL$Team)
ggplot(data = NHL, mapping = aes(x= PTS, y = Salary)) +
geom_point(mapping = aes(color = Team)) +
geom_smooth(data = filter(NHL, Team == "WSH")) +
geom_smooth(data = filter(NHL, Team == "EDM"))
library(tidyverse)
library(shiny)
library(DT)
library(data.table)
ggplot(data = NHL, mapping = aes(x= PTS, y = Salary)) +
geom_point(mapping = aes(color = Team)) +
geom_smooth(data = filter(NHL, Team == "WSH")) +
geom_smooth(data = filter(NHL, Team == "EDM"))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
#coord_polar() uses polar coordinates.
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 3)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = NHL) +
geom_point(mapping = aes(x = PTS, y = Salary)) +
facet_wrap(~ Position1, nrow = 3)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = NHL) +
geom_point(mapping = aes(x = PTS, y = Salary)) +
facet_grid(. ~ Position1)
ggplot(data = NHL) +
geom_point(mapping = aes(x = PTS, y = Salary)) +
facet_wrap(~ Position1, nrow = 3)
ggplot(data = NHL) +
geom_point(mapping = aes(x = PTS, y = Salary)) +
geom_smooth(method = "lm") +
facet_grid(. ~ Position1)
ggplot(data = NHL, mapping = aes(x = PTS, y = Salary)) +
geom_point() +
geom_smooth(method = "lm") +
facet_grid(. ~ Position1)
ggplot(data = NHL) +
geom_point(mapping = aes(x = PTS, y = Salary)) +
facet_wrap(~ Position1, nrow = 3)
ggplot(data = NHL, mapping = aes(x = PTS, y = Salary)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ Position1, nrow = 3)
ggplot(data = NHL, mapping = aes(x = PTS, y = Salary)) +
geom_point(mapping = aes(color = Age < 23)) +
geom_smooth(method = "lm") +
facet_wrap(~ Position1, nrow = 3)
model2 <- lm(Salary~Age*PlusMinus*PTS, data = filter(NHL, GP > 10))
summary(model2)
ggplot(data = NHL, mapping = aes(x = Age, y = Salary)) +
geom_point(mapping = aes(color = Age < 23)) +
geom_smooth(method = "lm") +
facet_wrap(~ Position1, nrow = 3)
ggplot(data = NHL, mapping = aes(x = Age, y = Salary)) +
geom_point(mapping = aes(color = Age < 23)) +
geom_smooth(method = "loess") +
facet_wrap(~ Position1, nrow = 3)
model2 <- lm(Salary~Age*PlusMinus*PTS, data = filter(NHL, GP > 10))
summary(model2)
?lm
?summary
ggplot(data = NHL, mapping = aes(x = PTS, y = PlusMinus, color = Position1)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(data = filter(NHL, GP > 10), mapping = aes(x = PTS, y = PlusMinus, color = Position1)) +
geom_point() +
geom_smooth(method = "lm")
print("Hello RÃ¶fi!")
ggplot(data = NHL, mapping = aes(x = Age, y = Salary)) +
geom_point(mapping = aes(color = Age < 23)) +
geom_smooth(method = "loess") +
facet_wrap(~ Position1, nrow = 3)
datatable(NHL2)
library(data.table)
datatable(NHL2)
datatable(NHL)
server <- function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- select(NHL, First.Name, Last.Name, Nat, Team, GP, G, A, PTS, PlusMinus, Position)
if (input$name != "All") {
data <- data[data$Last.Name == input$name,]
}
if (input$nat != "All") {
data <- data[data$Nat == input$nat,]
}
if (input$team != "All") {
data <- data[data$Team == input$team,]
}
data
}))}
output$downloadData <- downloadHandler(
filename = function() {
paste(data, ".csv", sep = "")
},
content = function(file) {
write.csv(data, file, row.names = TRUE)})
ui <- fluidPage(
titlePanel("NHL Stats, Season 2016/17"),
# Button
downloadButton("downloadData", "Download"),
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("name",
"Last Name:",
c("All",
unique(as.character(NHL$Last.Name))))
),
column(4,
selectInput("nat",
"Nationality:",
c("All",
unique(as.character(NHL$Nat))))
),
column(4,
selectInput("team",
"Team:",
c("All",
unique(as.character(NHL$Team))))
)
),
# Create a new row for the table.
fluidRow(
DT::dataTableOutput("table")
)
)
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("NHL Stats, Season 2016/17"),
# Button
downloadButton("downloadData", "Download"),
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("name",
"Last Name:",
c("All",
unique(as.character(NHL$Last.Name))))
),
column(4,
selectInput("nat",
"Nationality:",
c("All",
unique(as.character(NHL$Nat))))
),
column(4,
selectInput("team",
"Team:",
c("All",
unique(as.character(NHL$Team))))
)
),
# Create a new row for the table.
fluidRow(
DT::dataTableOutput("table")
)
)
NHL <- read.csv("NHL_cleaned.csv", sep =";", header = TRUE)
ui <- fluidPage(
titlePanel("NHL Stats, Season 2016/17"),
# Button
downloadButton("downloadData", "Download"),
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("name",
"Last Name:",
c("All",
unique(as.character(NHL$Last.Name))))
),
column(4,
selectInput("nat",
"Nationality:",
c("All",
unique(as.character(NHL$Nat))))
),
column(4,
selectInput("team",
"Team:",
c("All",
unique(as.character(NHL$Team))))
)
),
# Create a new row for the table.
fluidRow(
DT::dataTableOutput("table")
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- select(NHL, First.Name, Last.Name, Nat, Team, GP, G, A, PTS, PlusMinus, Position1)
if (input$name != "All") {
data <- data[data$Last.Name == input$name,]
}
if (input$nat != "All") {
data <- data[data$Nat == input$nat,]
}
if (input$team != "All") {
data <- data[data$Team == input$team,]
}
data
}))}
output$downloadData <- downloadHandler(
filename = function() {
paste(data, ".csv", sep = "")
},
content = function(file) {
write.csv(data, file, row.names = TRUE)})
ui <- fluidPage(
titlePanel("NHL Stats, Season 2016/17"),
# Button
downloadButton("downloadData", "Download"),
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("name",
"Last Name:",
c("All",
unique(as.character(NHL$Last.Name))))
),
column(4,
selectInput("nat",
"Nationality:",
c("All",
unique(as.character(NHL$Nat))))
),
column(4,
selectInput("team",
"Team:",
c("All",
unique(as.character(NHL$Team))))
)
),
# Create a new row for the table.
fluidRow(
DT::dataTableOutput("table")
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- select(NHL, First.Name, Last.Name, Nat, Team, GP, G, A, PTS, PlusMinus, Position1, Salary)
if (input$name != "All") {
data <- data[data$Last.Name == input$name,]
}
if (input$nat != "All") {
data <- data[data$Nat == input$nat,]
}
if (input$team != "All") {
data <- data[data$Team == input$team,]
}
data
}))}
output$downloadData <- downloadHandler(
filename = function() {
paste(data, ".csv", sep = "")
},
content = function(file) {
write.csv(data, file, row.names = TRUE)})
ui <- fluidPage(
titlePanel("NHL Stats, Season 2016/17"),
# Button
downloadButton("downloadData", "Download"),
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("name",
"Last Name:",
c("All",
unique(as.character(NHL$Last.Name))))
),
column(4,
selectInput("nat",
"Nationality:",
c("All",
unique(as.character(NHL$Nat))))
),
column(4,
selectInput("team",
"Team:",
c("All",
unique(as.character(NHL$Team))))
)
),
# Create a new row for the table.
fluidRow(
DT::dataTableOutput("table")
)
)
shinyApp(ui = ui, server = server)
